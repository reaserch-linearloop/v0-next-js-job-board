// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["mongodb"]
  output   = "./generated/client"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  JOB_SEEKER
  JOB_PROVIDER
  ADMIN
}

enum JobStatus {
  DRAFT
  ACTIVE
  CLOSED
}

enum ApplicationStatus {
  PENDING
  REVIEWING
  INTERVIEW
  REJECTED
  ACCEPTED
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  password      String?
  image         String?
  role          UserRole  @default(JOB_SEEKER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  jobs          Job[]
  applications  Application[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Job {
  id               String     @id @default(auto()) @map("_id") @db.ObjectId
  title            String
  company          String
  location         String
  type             String
  category         String
  experience       String
  salary           String
  description      String
  requirements     String[]
  responsibilities String[]
  status           JobStatus  @default(ACTIVE)
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  userId           String     @db.ObjectId
  user             User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  applications     Application[]
}

model Application {
  id           String            @id @default(auto()) @map("_id") @db.ObjectId
  coverLetter  String
  resumeUrl    String
  status       ApplicationStatus @default(PENDING)
  feedback     String?
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  userId       String            @db.ObjectId
  user         User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  jobId        String            @db.ObjectId
  job          Job               @relation(fields: [jobId], references: [id], onDelete: Cascade)
}
